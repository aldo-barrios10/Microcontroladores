CCS PCM C Compiler, Version 5.015, 5967               18-nov.-22 13:16

               Filename:   C:\CCS EFREN\ComSerialUni\main.lst

               ROM used:   752 words (9%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           27 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   26D
0003:  NOP
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 45,36
0005:  DATA A0,20
0006:  DATA C4,21
0007:  DATA A0,32
0008:  DATA 73,10
0009:  DATA E4,32
000A:  DATA 3A,10
000B:  DATA 25,26
000C:  DATA 75,05
000D:  DATA 0D,00
000E:  DATA 45,36
000F:  DATA A0,20
0010:  DATA C4,21
0011:  DATA A0,32
0012:  DATA 73,1D
0013:  DATA A0,12
0014:  DATA CC,3A
0015:  DATA 00,00
*
00BB:  MOVF   0B,W
00BC:  MOVWF  24
00BD:  BCF    0B.7
00BE:  BSF    03.5
00BF:  BSF    03.6
00C0:  BSF    0C.7
00C1:  BSF    0C.0
00C2:  NOP
00C3:  NOP
00C4:  BCF    03.5
00C5:  BCF    03.6
00C6:  BTFSC  24.7
00C7:  BSF    0B.7
00C8:  BTFSC  03.0
00C9:  GOTO   0F3
00CA:  BSF    03.6
00CB:  MOVF   0C,W
00CC:  ANDLW  7F
00CD:  BCF    03.6
00CE:  MOVWF  24
00CF:  BSF    03.6
00D0:  MOVF   0D,W
00D1:  BCF    03.6
00D2:  MOVWF  25
00D3:  BSF    03.6
00D4:  MOVF   0F,W
00D5:  BCF    03.6
00D6:  MOVWF  26
00D7:  MOVF   24,W
00D8:  BTFSS  0C.4
00D9:  GOTO   0D8
00DA:  MOVWF  19
00DB:  MOVF   25,W
00DC:  BSF    03.6
00DD:  MOVWF  0D
00DE:  BCF    03.6
00DF:  MOVF   26,W
00E0:  BSF    03.6
00E1:  MOVWF  0F
00E2:  BCF    03.6
00E3:  MOVF   0B,W
00E4:  MOVWF  27
00E5:  BCF    0B.7
00E6:  BSF    03.5
00E7:  BSF    03.6
00E8:  BSF    0C.7
00E9:  BSF    0C.0
00EA:  NOP
00EB:  NOP
00EC:  BCF    03.5
00ED:  BCF    03.6
00EE:  BTFSC  27.7
00EF:  BSF    0B.7
00F0:  DECFSZ 23,F
00F1:  GOTO   0F3
00F2:  GOTO   113
00F3:  BSF    03.6
00F4:  RLF    0C,W
00F5:  RLF    0E,W
00F6:  ANDLW  7F
00F7:  BCF    03.6
00F8:  MOVWF  24
00F9:  BSF    03.6
00FA:  MOVF   0D,W
00FB:  BCF    03.6
00FC:  MOVWF  25
00FD:  BSF    03.6
00FE:  MOVF   0F,W
00FF:  BCF    03.6
0100:  MOVWF  26
0101:  MOVF   24,W
0102:  BTFSS  0C.4
0103:  GOTO   102
0104:  MOVWF  19
0105:  MOVF   25,W
0106:  BSF    03.6
0107:  MOVWF  0D
0108:  BCF    03.6
0109:  MOVF   26,W
010A:  BSF    03.6
010B:  MOVWF  0F
010C:  INCF   0D,F
010D:  BTFSC  03.2
010E:  INCF   0F,F
010F:  BCF    03.0
0110:  BCF    03.6
0111:  DECFSZ 23,F
0112:  GOTO   0BB
0113:  BCF    0A.3
0114:  BCF    0A.4
0115:  GOTO   2C0 (RETURN)
0116:  CLRF   2B
0117:  MOVF   04,W
0118:  MOVWF  2A
0119:  BCF    2B.0
011A:  BTFSC  03.7
011B:  BSF    2B.0
011C:  SWAPF  24,W
011D:  IORLW  F0
011E:  MOVWF  26
011F:  ADDWF  26,F
0120:  ADDLW  E2
0121:  MOVWF  27
0122:  ADDLW  32
0123:  MOVWF  29
0124:  MOVF   24,W
0125:  ANDLW  0F
0126:  ADDWF  27,F
0127:  ADDWF  27,F
0128:  ADDWF  29,F
0129:  ADDLW  E9
012A:  MOVWF  28
012B:  ADDWF  28,F
012C:  ADDWF  28,F
012D:  SWAPF  23,W
012E:  ANDLW  0F
012F:  ADDWF  28,F
0130:  ADDWF  29,F
0131:  RLF    28,F
0132:  RLF    29,F
0133:  COMF   29,F
0134:  RLF    29,F
0135:  MOVF   23,W
0136:  ANDLW  0F
0137:  ADDWF  29,F
0138:  RLF    26,F
0139:  MOVLW  07
013A:  MOVWF  25
013B:  MOVLW  0A
013C:  ADDWF  29,F
013D:  DECF   28,F
013E:  BTFSS  03.0
013F:  GOTO   13C
0140:  ADDWF  28,F
0141:  DECF   27,F
0142:  BTFSS  03.0
0143:  GOTO   140
0144:  ADDWF  27,F
0145:  DECF   26,F
0146:  BTFSS  03.0
0147:  GOTO   144
0148:  ADDWF  26,F
0149:  DECF   25,F
014A:  BTFSS  03.0
014B:  GOTO   148
014C:  MOVLW  25
014D:  MOVWF  04
014E:  BCF    03.7
014F:  MOVLW  07
0150:  ANDWF  2A,W
0151:  BCF    2A.6
0152:  ADDWF  04,F
0153:  MOVLW  29
0154:  SUBWF  04,W
0155:  BTFSC  03.2
0156:  BSF    2A.6
0157:  MOVF   00,W
0158:  MOVWF  77
0159:  BTFSS  03.2
015A:  GOTO   163
015B:  BTFSC  2A.6
015C:  GOTO   163
015D:  BTFSC  2A.4
015E:  GOTO   16B
015F:  BTFSC  2A.3
0160:  GOTO   163
0161:  MOVLW  20
0162:  GOTO   166
0163:  BSF    2A.3
0164:  BCF    2A.4
0165:  MOVLW  30
0166:  ADDWF  77,F
0167:  MOVF   77,W
0168:  BTFSS  0C.4
0169:  GOTO   168
016A:  MOVWF  19
016B:  INCF   04,F
016C:  BTFSS  2A.6
016D:  GOTO   153
016E:  BCF    0A.3
016F:  BCF    0A.4
0170:  GOTO   2C7 (RETURN)
*
01AF:  MOVF   0B,W
01B0:  MOVWF  24
01B1:  BCF    0B.7
01B2:  BSF    03.5
01B3:  BSF    03.6
01B4:  BSF    0C.7
01B5:  BSF    0C.0
01B6:  NOP
01B7:  NOP
01B8:  BCF    03.5
01B9:  BCF    03.6
01BA:  BTFSC  24.7
01BB:  BSF    0B.7
01BC:  BTFSC  03.0
01BD:  GOTO   1E6
01BE:  BSF    03.6
01BF:  MOVF   0C,W
01C0:  ANDLW  7F
01C1:  BCF    03.6
01C2:  MOVWF  24
01C3:  BSF    03.6
01C4:  MOVF   0D,W
01C5:  BCF    03.6
01C6:  MOVWF  25
01C7:  BSF    03.6
01C8:  MOVF   0F,W
01C9:  BCF    03.6
01CA:  MOVWF  26
01CB:  MOVF   24,W
01CC:  MOVWF  2C
01CD:  CALL   183
01CE:  MOVF   25,W
01CF:  BSF    03.6
01D0:  MOVWF  0D
01D1:  BCF    03.6
01D2:  MOVF   26,W
01D3:  BSF    03.6
01D4:  MOVWF  0F
01D5:  BCF    03.6
01D6:  MOVF   0B,W
01D7:  MOVWF  27
01D8:  BCF    0B.7
01D9:  BSF    03.5
01DA:  BSF    03.6
01DB:  BSF    0C.7
01DC:  BSF    0C.0
01DD:  NOP
01DE:  NOP
01DF:  BCF    03.5
01E0:  BCF    03.6
01E1:  BTFSC  27.7
01E2:  BSF    0B.7
01E3:  DECFSZ 23,F
01E4:  GOTO   1E6
01E5:  GOTO   205
01E6:  BSF    03.6
01E7:  RLF    0C,W
01E8:  RLF    0E,W
01E9:  ANDLW  7F
01EA:  BCF    03.6
01EB:  MOVWF  24
01EC:  BSF    03.6
01ED:  MOVF   0D,W
01EE:  BCF    03.6
01EF:  MOVWF  25
01F0:  BSF    03.6
01F1:  MOVF   0F,W
01F2:  BCF    03.6
01F3:  MOVWF  26
01F4:  MOVF   24,W
01F5:  MOVWF  2C
01F6:  CALL   183
01F7:  MOVF   25,W
01F8:  BSF    03.6
01F9:  MOVWF  0D
01FA:  BCF    03.6
01FB:  MOVF   26,W
01FC:  BSF    03.6
01FD:  MOVWF  0F
01FE:  INCF   0D,F
01FF:  BTFSC  03.2
0200:  INCF   0F,F
0201:  BCF    03.0
0202:  BCF    03.6
0203:  DECFSZ 23,F
0204:  GOTO   1AF
0205:  BCF    0A.3
0206:  BCF    0A.4
0207:  GOTO   2E0 (RETURN)
0208:  CLRF   2B
0209:  MOVF   04,W
020A:  MOVWF  2A
020B:  BCF    2B.0
020C:  BTFSC  03.7
020D:  BSF    2B.0
020E:  SWAPF  24,W
020F:  IORLW  F0
0210:  MOVWF  26
0211:  ADDWF  26,F
0212:  ADDLW  E2
0213:  MOVWF  27
0214:  ADDLW  32
0215:  MOVWF  29
0216:  MOVF   24,W
0217:  ANDLW  0F
0218:  ADDWF  27,F
0219:  ADDWF  27,F
021A:  ADDWF  29,F
021B:  ADDLW  E9
021C:  MOVWF  28
021D:  ADDWF  28,F
021E:  ADDWF  28,F
021F:  SWAPF  23,W
0220:  ANDLW  0F
0221:  ADDWF  28,F
0222:  ADDWF  29,F
0223:  RLF    28,F
0224:  RLF    29,F
0225:  COMF   29,F
0226:  RLF    29,F
0227:  MOVF   23,W
0228:  ANDLW  0F
0229:  ADDWF  29,F
022A:  RLF    26,F
022B:  MOVLW  07
022C:  MOVWF  25
022D:  MOVLW  0A
022E:  ADDWF  29,F
022F:  DECF   28,F
0230:  BTFSS  03.0
0231:  GOTO   22E
0232:  ADDWF  28,F
0233:  DECF   27,F
0234:  BTFSS  03.0
0235:  GOTO   232
0236:  ADDWF  27,F
0237:  DECF   26,F
0238:  BTFSS  03.0
0239:  GOTO   236
023A:  ADDWF  26,F
023B:  DECF   25,F
023C:  BTFSS  03.0
023D:  GOTO   23A
023E:  MOVLW  25
023F:  MOVWF  04
0240:  BCF    03.7
0241:  MOVLW  07
0242:  ANDWF  2A,W
0243:  BCF    2A.6
0244:  ADDWF  04,F
0245:  MOVLW  29
0246:  SUBWF  04,W
0247:  BTFSC  03.2
0248:  BSF    2A.6
0249:  MOVF   00,W
024A:  MOVWF  77
024B:  BTFSS  03.2
024C:  GOTO   255
024D:  BTFSC  2A.6
024E:  GOTO   255
024F:  BTFSC  2A.4
0250:  GOTO   267
0251:  BTFSC  2A.3
0252:  GOTO   255
0253:  MOVLW  20
0254:  GOTO   258
0255:  BSF    2A.3
0256:  BCF    2A.4
0257:  MOVLW  30
0258:  ADDWF  77,F
0259:  CLRF   24
025A:  MOVF   04,W
025B:  MOVWF  23
025C:  BCF    24.0
025D:  BTFSC  03.7
025E:  BSF    24.0
025F:  MOVF   77,W
0260:  MOVWF  2C
0261:  CALL   183
0262:  MOVF   23,W
0263:  MOVWF  04
0264:  BCF    03.7
0265:  BTFSC  24.0
0266:  BSF    03.7
0267:  INCF   04,F
0268:  BTFSS  2A.6
0269:  GOTO   245
026A:  BCF    0A.3
026B:  BCF    0A.4
026C:  GOTO   2E7 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses INTRC_IO,NOWDT,PROTECT,NOLVP,MCLR,NOBROWNOUT 
.................... #use delay(INTERNAL=4000000) 
*
0016:  MOVLW  2D
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   02A
001C:  MOVLW  01
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  4A
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  GOTO   028
0028:  DECFSZ 00,F
0029:  GOTO   01C
002A:  RETURN
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0043:  MOVLW  0F
0044:  BSF    03.5
0045:  ANDWF  08,W
0046:  IORLW  F0
0047:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0048:  BCF    03.5
0049:  BSF    08.2
....................    delay_cycles(1); 
004A:  NOP
....................    lcd_output_enable(1); 
004B:  BSF    08.0
....................    delay_cycles(1); 
004C:  NOP
....................    high = lcd_read_nibble(); 
004D:  CALL   037
004E:  MOVF   78,W
004F:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
0050:  BCF    08.0
....................    delay_cycles(1); 
0051:  NOP
....................    lcd_output_enable(1); 
0052:  BSF    08.0
....................    delay_us(1); 
0053:  NOP
....................    low = lcd_read_nibble(); 
0054:  CALL   037
0055:  MOVF   78,W
0056:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0057:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0058:  MOVLW  0F
0059:  BSF    03.5
005A:  ANDWF  08,W
005B:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005C:  BCF    03.5
005D:  SWAPF  34,W
005E:  MOVWF  77
005F:  MOVLW  F0
0060:  ANDWF  77,F
0061:  MOVF   77,W
0062:  IORWF  33,W
0063:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0037:  MOVF   08,W
0038:  MOVWF  77
0039:  SWAPF  08,W
003A:  ANDLW  0F
003B:  MOVWF  78
....................   #endif 
003C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002B:  SWAPF  34,W
002C:  ANDLW  F0
002D:  MOVWF  77
002E:  MOVLW  0F
002F:  ANDWF  08,W
0030:  IORWF  77,W
0031:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0032:  NOP
....................    lcd_output_enable(1); 
0033:  BSF    08.0
....................    delay_us(2); 
0034:  GOTO   035
....................    lcd_output_enable(0); 
0035:  BCF    08.0
0036:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003D:  BSF    03.5
003E:  BCF    08.0
....................    lcd_rs_tris(); 
003F:  BCF    08.1
....................    lcd_rw_tris(); 
0040:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0041:  BCF    03.5
0042:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0064:  MOVF   78,W
0065:  MOVWF  33
0066:  BTFSC  33.7
0067:  GOTO   043
....................    lcd_output_rs(address); 
0068:  BTFSS  31.0
0069:  BCF    08.1
006A:  BTFSC  31.0
006B:  BSF    08.1
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_rw(0); 
006D:  BCF    08.2
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(0); 
006F:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0070:  SWAPF  32,W
0071:  MOVWF  33
0072:  MOVLW  0F
0073:  ANDWF  33,F
0074:  MOVF   33,W
0075:  MOVWF  34
0076:  CALL   02B
....................    lcd_send_nibble(n & 0xf); 
0077:  MOVF   32,W
0078:  ANDLW  0F
0079:  MOVWF  33
007A:  MOVWF  34
007B:  CALL   02B
007C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007D:  MOVLW  28
007E:  MOVWF  24
007F:  MOVLW  0C
0080:  MOVWF  25
0081:  MOVLW  01
0082:  MOVWF  26
0083:  MOVLW  06
0084:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0085:  BCF    08.0
....................    lcd_output_rs(0); 
0086:  BCF    08.1
....................    lcd_output_rw(0); 
0087:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0088:  MOVLW  0F
0089:  BSF    03.5
008A:  ANDWF  08,W
008B:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
008C:  BCF    08.0
....................    lcd_rs_tris(); 
008D:  BCF    08.1
....................    lcd_rw_tris(); 
008E:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
008F:  MOVLW  0F
0090:  BCF    03.5
0091:  MOVWF  2D
0092:  CALL   016
....................    for(i=1;i<=3;++i) 
0093:  MOVLW  01
0094:  MOVWF  23
0095:  MOVF   23,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A1
....................    { 
....................        lcd_send_nibble(3); 
0099:  MOVLW  03
009A:  MOVWF  34
009B:  CALL   02B
....................        delay_ms(5); 
009C:  MOVLW  05
009D:  MOVWF  2D
009E:  CALL   016
009F:  INCF   23,F
00A0:  GOTO   095
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A1:  MOVLW  02
00A2:  MOVWF  34
00A3:  CALL   02B
....................    delay_ms(5); 
00A4:  MOVLW  05
00A5:  MOVWF  2D
00A6:  CALL   016
....................    for(i=0;i<=3;++i) 
00A7:  CLRF   23
00A8:  MOVF   23,W
00A9:  SUBLW  03
00AA:  BTFSS  03.0
00AB:  GOTO   0B8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AC:  MOVLW  24
00AD:  ADDWF  23,W
00AE:  MOVWF  04
00AF:  BCF    03.7
00B0:  MOVF   00,W
00B1:  MOVWF  28
00B2:  CLRF   31
00B3:  MOVF   28,W
00B4:  MOVWF  32
00B5:  CALL   03D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B6:  INCF   23,F
00B7:  GOTO   0A8
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   293 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0171:  DECFSZ 2E,W
0172:  GOTO   174
0173:  GOTO   177
....................       address=LCD_LINE_TWO; 
0174:  MOVLW  40
0175:  MOVWF  2F
0176:  GOTO   178
....................    else 
....................       address=0; 
0177:  CLRF   2F
....................       
....................    address+=x-1; 
0178:  MOVLW  01
0179:  SUBWF  2D,W
017A:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
017B:  MOVF   2F,W
017C:  IORLW  80
017D:  MOVWF  30
017E:  CLRF   31
017F:  MOVF   30,W
0180:  MOVWF  32
0181:  CALL   03D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0182:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0183:  MOVF   2C,W
0184:  XORLW  07
0185:  BTFSC  03.2
0186:  GOTO   191
0187:  XORLW  0B
0188:  BTFSC  03.2
0189:  GOTO   196
018A:  XORLW  06
018B:  BTFSC  03.2
018C:  GOTO   19E
018D:  XORLW  02
018E:  BTFSC  03.2
018F:  GOTO   1A4
0190:  GOTO   1A9
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0191:  MOVLW  01
0192:  MOVWF  2D
0193:  MOVWF  2E
0194:  CALL   171
0195:  GOTO   1AE
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0196:  CLRF   31
0197:  MOVLW  01
0198:  MOVWF  32
0199:  CALL   03D
....................                      delay_ms(2); 
019A:  MOVLW  02
019B:  MOVWF  2D
019C:  CALL   016
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
019D:  GOTO   1AE
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
019E:  MOVLW  01
019F:  MOVWF  2D
01A0:  MOVLW  02
01A1:  MOVWF  2E
01A2:  CALL   171
01A3:  GOTO   1AE
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01A4:  CLRF   31
01A5:  MOVLW  10
01A6:  MOVWF  32
01A7:  CALL   03D
01A8:  GOTO   1AE
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01A9:  MOVLW  01
01AA:  MOVWF  31
01AB:  MOVF   2C,W
01AC:  MOVWF  32
01AD:  CALL   03D
....................      #endif 
....................    } 
01AE:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use RS232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, timeout=100) 
....................  
.................... void main() 
*
026D:  MOVF   03,W
026E:  ANDLW  1F
026F:  MOVWF  03
0270:  MOVLW  61
0271:  BSF    03.5
0272:  MOVWF  0F
0273:  MOVF   0F,W
0274:  BCF    03.5
0275:  CLRF   20
0276:  BSF    03.5
0277:  BSF    03.6
0278:  BCF    07.3
0279:  MOVLW  19
027A:  BCF    03.6
027B:  MOVWF  19
027C:  MOVLW  A6
027D:  MOVWF  18
027E:  MOVLW  90
027F:  BCF    03.5
0280:  MOVWF  18
0281:  BSF    03.5
0282:  BSF    03.6
0283:  MOVF   09,W
0284:  ANDLW  C0
0285:  MOVWF  09
0286:  BCF    03.6
0287:  BCF    1F.4
0288:  BCF    1F.5
0289:  MOVLW  00
028A:  BSF    03.6
028B:  MOVWF  08
028C:  BCF    03.5
028D:  CLRF   07
028E:  CLRF   08
028F:  CLRF   09
0290:  BCF    03.7
.................... { 
....................  
....................    int16 iVolt; 
....................  
....................    lcd_init(); 
0291:  BCF    03.6
0292:  GOTO   07D
....................    setup_adc_ports(sAN0); 
0293:  BSF    03.5
0294:  BSF    03.6
0295:  MOVF   09,W
0296:  ANDLW  C0
0297:  MOVWF  09
0298:  BCF    03.6
0299:  BCF    1F.4
029A:  BCF    1F.5
029B:  MOVLW  01
029C:  BSF    03.6
029D:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL); 
029E:  BCF    03.5
029F:  BCF    03.6
02A0:  BSF    1F.6
02A1:  BSF    1F.7
02A2:  BSF    03.5
02A3:  BSF    1F.7
02A4:  BCF    03.5
02A5:  BSF    1F.0
....................  
....................     
....................  
....................    while(TRUE) 
....................    { 
....................       iVolt=read_adc(); 
02A6:  BSF    1F.1
02A7:  BTFSC  1F.1
02A8:  GOTO   2A7
02A9:  BSF    03.5
02AA:  MOVF   1E,W
02AB:  BCF    03.5
02AC:  MOVWF  21
02AD:  MOVF   1E,W
02AE:  MOVWF  22
....................       delay_ms(1000); 
02AF:  MOVLW  04
02B0:  MOVWF  23
02B1:  MOVLW  FA
02B2:  MOVWF  2D
02B3:  CALL   016
02B4:  DECFSZ 23,F
02B5:  GOTO   2B1
....................       printf("El ADC es de: %Lu\n\r", iVolt); 
02B6:  MOVLW  04
02B7:  BSF    03.6
02B8:  MOVWF  0D
02B9:  MOVLW  00
02BA:  MOVWF  0F
02BB:  BCF    03.0
02BC:  MOVLW  0E
02BD:  BCF    03.6
02BE:  MOVWF  23
02BF:  GOTO   0BB
02C0:  MOVLW  10
02C1:  MOVWF  04
02C2:  MOVF   22,W
02C3:  MOVWF  24
02C4:  MOVF   21,W
02C5:  MOVWF  23
02C6:  GOTO   116
02C7:  MOVLW  0A
02C8:  BTFSS  0C.4
02C9:  GOTO   2C8
02CA:  MOVWF  19
02CB:  MOVLW  0D
02CC:  BTFSS  0C.4
02CD:  GOTO   2CC
02CE:  MOVWF  19
....................        
....................       printf(lcd_putc,"\f"); 
02CF:  MOVLW  0C
02D0:  MOVWF  2C
02D1:  CALL   183
....................       lcd_gotoxy(1,1); 
02D2:  MOVLW  01
02D3:  MOVWF  2D
02D4:  MOVWF  2E
02D5:  CALL   171
....................       printf(lcd_putc,"El ADC es: %Lu", iVolt); 
02D6:  MOVLW  0E
02D7:  BSF    03.6
02D8:  MOVWF  0D
02D9:  MOVLW  00
02DA:  MOVWF  0F
02DB:  BCF    03.0
02DC:  MOVLW  0B
02DD:  BCF    03.6
02DE:  MOVWF  23
02DF:  GOTO   1AF
02E0:  MOVLW  10
02E1:  MOVWF  04
02E2:  MOVF   22,W
02E3:  MOVWF  24
02E4:  MOVF   21,W
02E5:  MOVWF  23
02E6:  GOTO   208
....................       delay_ms(1000); 
02E7:  MOVLW  04
02E8:  MOVWF  23
02E9:  MOVLW  FA
02EA:  MOVWF  2D
02EB:  CALL   016
02EC:  DECFSZ 23,F
02ED:  GOTO   2E9
02EE:  GOTO   2A6
....................        
....................        
....................  
....................    } 
....................  
.................... } 
....................  
02EF:  SLEEP

Configuration Fuses:
   Word  1: 2CA4   INTRC_IO NOWDT PUT MCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
