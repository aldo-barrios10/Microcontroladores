CCS PCM C Compiler, Version 5.015, 5967               17-nov.-22 23:00

               Filename:   C:\CCS EFREN\ComSerial\main.lst

               ROM used:   769 words (9%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   239
0003:  NOP
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 45,36
0005:  DATA A0,20
0006:  DATA C4,21
0007:  DATA A0,32
0008:  DATA 73,10
0009:  DATA E4,32
000A:  DATA 3A,10
000B:  DATA 25,26
000C:  DATA 75,05
000D:  DATA 0D,00
000E:  DATA 50,39
000F:  DATA F4,37
0010:  DATA E3,37
0011:  DATA EC,37
0012:  DATA A0,20
0013:  DATA 3A,00
0014:  DATA C2,3A
0015:  DATA 65,37
0016:  DATA 20,32
0017:  DATA E9,30
0018:  DATA 00,01
0019:  DATA 50,39
001A:  DATA F4,37
001B:  DATA E3,37
001C:  DATA EC,37
001D:  DATA 20,21
001E:  DATA 3A,00
001F:  DATA C2,3A
0020:  DATA 65,37
0021:  DATA E1,39
0022:  DATA 20,37
0023:  DATA EF,31
0024:  DATA E8,32
0025:  DATA 73,00
0026:  DATA D3,34
0027:  DATA 6E,10
0028:  DATA 70,39
0029:  DATA 6F,3A
002A:  DATA EF,31
002B:  DATA 6F,36
002C:  DATA 6F,00
*
00D2:  MOVF   0B,W
00D3:  MOVWF  25
00D4:  BCF    0B.7
00D5:  BSF    03.5
00D6:  BSF    03.6
00D7:  BSF    0C.7
00D8:  BSF    0C.0
00D9:  NOP
00DA:  NOP
00DB:  BCF    03.5
00DC:  BCF    03.6
00DD:  BTFSC  25.7
00DE:  BSF    0B.7
00DF:  BTFSC  03.0
00E0:  GOTO   10A
00E1:  BSF    03.6
00E2:  MOVF   0C,W
00E3:  ANDLW  7F
00E4:  BCF    03.6
00E5:  MOVWF  25
00E6:  BSF    03.6
00E7:  MOVF   0D,W
00E8:  BCF    03.6
00E9:  MOVWF  26
00EA:  BSF    03.6
00EB:  MOVF   0F,W
00EC:  BCF    03.6
00ED:  MOVWF  27
00EE:  MOVF   25,W
00EF:  BTFSS  0C.4
00F0:  GOTO   0EF
00F1:  MOVWF  19
00F2:  MOVF   26,W
00F3:  BSF    03.6
00F4:  MOVWF  0D
00F5:  BCF    03.6
00F6:  MOVF   27,W
00F7:  BSF    03.6
00F8:  MOVWF  0F
00F9:  BCF    03.6
00FA:  MOVF   0B,W
00FB:  MOVWF  28
00FC:  BCF    0B.7
00FD:  BSF    03.5
00FE:  BSF    03.6
00FF:  BSF    0C.7
0100:  BSF    0C.0
0101:  NOP
0102:  NOP
0103:  BCF    03.5
0104:  BCF    03.6
0105:  BTFSC  28.7
0106:  BSF    0B.7
0107:  DECFSZ 24,F
0108:  GOTO   10A
0109:  GOTO   12A
010A:  BSF    03.6
010B:  RLF    0C,W
010C:  RLF    0E,W
010D:  ANDLW  7F
010E:  BCF    03.6
010F:  MOVWF  25
0110:  BSF    03.6
0111:  MOVF   0D,W
0112:  BCF    03.6
0113:  MOVWF  26
0114:  BSF    03.6
0115:  MOVF   0F,W
0116:  BCF    03.6
0117:  MOVWF  27
0118:  MOVF   25,W
0119:  BTFSS  0C.4
011A:  GOTO   119
011B:  MOVWF  19
011C:  MOVF   26,W
011D:  BSF    03.6
011E:  MOVWF  0D
011F:  BCF    03.6
0120:  MOVF   27,W
0121:  BSF    03.6
0122:  MOVWF  0F
0123:  INCF   0D,F
0124:  BTFSC  03.2
0125:  INCF   0F,F
0126:  BCF    03.0
0127:  BCF    03.6
0128:  DECFSZ 24,F
0129:  GOTO   0D2
012A:  BCF    0A.3
012B:  BCF    0A.4
012C:  GOTO   28C (RETURN)
012D:  CLRF   2C
012E:  MOVF   04,W
012F:  MOVWF  2B
0130:  BCF    2C.0
0131:  BTFSC  03.7
0132:  BSF    2C.0
0133:  SWAPF  25,W
0134:  IORLW  F0
0135:  MOVWF  27
0136:  ADDWF  27,F
0137:  ADDLW  E2
0138:  MOVWF  28
0139:  ADDLW  32
013A:  MOVWF  2A
013B:  MOVF   25,W
013C:  ANDLW  0F
013D:  ADDWF  28,F
013E:  ADDWF  28,F
013F:  ADDWF  2A,F
0140:  ADDLW  E9
0141:  MOVWF  29
0142:  ADDWF  29,F
0143:  ADDWF  29,F
0144:  SWAPF  24,W
0145:  ANDLW  0F
0146:  ADDWF  29,F
0147:  ADDWF  2A,F
0148:  RLF    29,F
0149:  RLF    2A,F
014A:  COMF   2A,F
014B:  RLF    2A,F
014C:  MOVF   24,W
014D:  ANDLW  0F
014E:  ADDWF  2A,F
014F:  RLF    27,F
0150:  MOVLW  07
0151:  MOVWF  26
0152:  MOVLW  0A
0153:  ADDWF  2A,F
0154:  DECF   29,F
0155:  BTFSS  03.0
0156:  GOTO   153
0157:  ADDWF  29,F
0158:  DECF   28,F
0159:  BTFSS  03.0
015A:  GOTO   157
015B:  ADDWF  28,F
015C:  DECF   27,F
015D:  BTFSS  03.0
015E:  GOTO   15B
015F:  ADDWF  27,F
0160:  DECF   26,F
0161:  BTFSS  03.0
0162:  GOTO   15F
0163:  MOVLW  26
0164:  MOVWF  04
0165:  BCF    03.7
0166:  MOVLW  07
0167:  ANDWF  2B,W
0168:  BCF    2B.6
0169:  ADDWF  04,F
016A:  MOVLW  2A
016B:  SUBWF  04,W
016C:  BTFSC  03.2
016D:  BSF    2B.6
016E:  MOVF   00,W
016F:  MOVWF  77
0170:  BTFSS  03.2
0171:  GOTO   17A
0172:  BTFSC  2B.6
0173:  GOTO   17A
0174:  BTFSC  2B.4
0175:  GOTO   182
0176:  BTFSC  2B.3
0177:  GOTO   17A
0178:  MOVLW  20
0179:  GOTO   17D
017A:  BSF    2B.3
017B:  BCF    2B.4
017C:  MOVLW  30
017D:  ADDWF  77,F
017E:  MOVF   77,W
017F:  BTFSS  0C.4
0180:  GOTO   17F
0181:  MOVWF  19
0182:  INCF   04,F
0183:  BTFSS  2B.6
0184:  GOTO   16A
0185:  BCF    0A.3
0186:  BCF    0A.4
0187:  GOTO   293 (RETURN)
*
01E3:  MOVF   0B,W
01E4:  MOVWF  24
01E5:  BCF    0B.7
01E6:  BSF    03.5
01E7:  BSF    03.6
01E8:  BSF    0C.7
01E9:  BSF    0C.0
01EA:  NOP
01EB:  NOP
01EC:  BCF    03.5
01ED:  BCF    03.6
01EE:  BTFSC  24.7
01EF:  BSF    0B.7
01F0:  BSF    03.6
01F1:  MOVF   0C,W
01F2:  ANDLW  7F
01F3:  BTFSC  03.2
01F4:  GOTO   237
01F5:  BCF    03.6
01F6:  MOVWF  24
01F7:  BSF    03.6
01F8:  MOVF   0D,W
01F9:  BCF    03.6
01FA:  MOVWF  25
01FB:  BSF    03.6
01FC:  MOVF   0F,W
01FD:  BCF    03.6
01FE:  MOVWF  26
01FF:  MOVF   24,W
0200:  MOVWF  27
0201:  CALL   1B7
0202:  MOVF   25,W
0203:  BSF    03.6
0204:  MOVWF  0D
0205:  BCF    03.6
0206:  MOVF   26,W
0207:  BSF    03.6
0208:  MOVWF  0F
0209:  BCF    03.6
020A:  MOVF   0B,W
020B:  MOVWF  27
020C:  BCF    0B.7
020D:  BSF    03.5
020E:  BSF    03.6
020F:  BSF    0C.7
0210:  BSF    0C.0
0211:  NOP
0212:  NOP
0213:  BCF    03.5
0214:  BCF    03.6
0215:  BTFSC  27.7
0216:  BSF    0B.7
0217:  BSF    03.6
0218:  RLF    0C,W
0219:  RLF    0E,W
021A:  ANDLW  7F
021B:  BTFSC  03.2
021C:  GOTO   237
021D:  BCF    03.6
021E:  MOVWF  24
021F:  BSF    03.6
0220:  MOVF   0D,W
0221:  BCF    03.6
0222:  MOVWF  25
0223:  BSF    03.6
0224:  MOVF   0F,W
0225:  BCF    03.6
0226:  MOVWF  26
0227:  MOVF   24,W
0228:  MOVWF  27
0229:  CALL   1B7
022A:  MOVF   25,W
022B:  BSF    03.6
022C:  MOVWF  0D
022D:  BCF    03.6
022E:  MOVF   26,W
022F:  BSF    03.6
0230:  MOVWF  0F
0231:  INCF   0D,F
0232:  BTFSC  03.2
0233:  INCF   0F,F
0234:  BCF    03.6
0235:  GOTO   1E3
0236:  BSF    03.6
0237:  BCF    03.6
0238:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses INTRC_IO,NOWDT,PROTECT,NOLVP,MCLR,NOBROWNOUT 
.................... #use delay(INTERNAL=4000000) 
*
002D:  MOVLW  29
002E:  MOVWF  04
002F:  BCF    03.7
0030:  MOVF   00,W
0031:  BTFSC  03.2
0032:  GOTO   041
0033:  MOVLW  01
0034:  MOVWF  78
0035:  CLRF   77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 78,F
0039:  GOTO   035
003A:  MOVLW  4A
003B:  MOVWF  77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  GOTO   03F
003F:  DECFSZ 00,F
0040:  GOTO   033
0041:  RETURN
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
005A:  MOVLW  0F
005B:  BSF    03.5
005C:  ANDWF  08,W
005D:  IORLW  F0
005E:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005F:  BCF    03.5
0060:  BSF    08.2
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    08.0
....................    delay_cycles(1); 
0063:  NOP
....................    high = lcd_read_nibble(); 
0064:  CALL   04E
0065:  MOVF   78,W
0066:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0067:  BCF    08.0
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(1); 
0069:  BSF    08.0
....................    delay_us(1); 
006A:  NOP
....................    low = lcd_read_nibble(); 
006B:  CALL   04E
006C:  MOVF   78,W
006D:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
006E:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006F:  MOVLW  0F
0070:  BSF    03.5
0071:  ANDWF  08,W
0072:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0073:  BCF    03.5
0074:  SWAPF  2F,W
0075:  MOVWF  77
0076:  MOVLW  F0
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  2E,W
007A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004E:  MOVF   08,W
004F:  MOVWF  77
0050:  SWAPF  08,W
0051:  ANDLW  0F
0052:  MOVWF  78
....................   #endif 
0053:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0042:  SWAPF  2F,W
0043:  ANDLW  F0
0044:  MOVWF  77
0045:  MOVLW  0F
0046:  ANDWF  08,W
0047:  IORWF  77,W
0048:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BSF    08.0
....................    delay_us(2); 
004B:  GOTO   04C
....................    lcd_output_enable(0); 
004C:  BCF    08.0
004D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0054:  BSF    03.5
0055:  BCF    08.0
....................    lcd_rs_tris(); 
0056:  BCF    08.1
....................    lcd_rw_tris(); 
0057:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0058:  BCF    03.5
0059:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007B:  MOVF   78,W
007C:  MOVWF  2E
007D:  BTFSC  2E.7
007E:  GOTO   05A
....................    lcd_output_rs(address); 
007F:  BTFSS  2C.0
0080:  BCF    08.1
0081:  BTFSC  2C.0
0082:  BSF    08.1
....................    delay_cycles(1); 
0083:  NOP
....................    lcd_output_rw(0); 
0084:  BCF    08.2
....................    delay_cycles(1); 
0085:  NOP
....................    lcd_output_enable(0); 
0086:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0087:  SWAPF  2D,W
0088:  MOVWF  2E
0089:  MOVLW  0F
008A:  ANDWF  2E,F
008B:  MOVF   2E,W
008C:  MOVWF  2F
008D:  CALL   042
....................    lcd_send_nibble(n & 0xf); 
008E:  MOVF   2D,W
008F:  ANDLW  0F
0090:  MOVWF  2E
0091:  MOVWF  2F
0092:  CALL   042
0093:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0094:  MOVLW  28
0095:  MOVWF  25
0096:  MOVLW  0C
0097:  MOVWF  26
0098:  MOVLW  01
0099:  MOVWF  27
009A:  MOVLW  06
009B:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
009C:  BCF    08.0
....................    lcd_output_rs(0); 
009D:  BCF    08.1
....................    lcd_output_rw(0); 
009E:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009F:  MOVLW  0F
00A0:  BSF    03.5
00A1:  ANDWF  08,W
00A2:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00A3:  BCF    08.0
....................    lcd_rs_tris(); 
00A4:  BCF    08.1
....................    lcd_rw_tris(); 
00A5:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00A6:  MOVLW  0F
00A7:  BCF    03.5
00A8:  MOVWF  29
00A9:  CALL   02D
....................    for(i=1;i<=3;++i) 
00AA:  MOVLW  01
00AB:  MOVWF  24
00AC:  MOVF   24,W
00AD:  SUBLW  03
00AE:  BTFSS  03.0
00AF:  GOTO   0B8
....................    { 
....................        lcd_send_nibble(3); 
00B0:  MOVLW  03
00B1:  MOVWF  2F
00B2:  CALL   042
....................        delay_ms(5); 
00B3:  MOVLW  05
00B4:  MOVWF  29
00B5:  CALL   02D
00B6:  INCF   24,F
00B7:  GOTO   0AC
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B8:  MOVLW  02
00B9:  MOVWF  2F
00BA:  CALL   042
....................    delay_ms(5); 
00BB:  MOVLW  05
00BC:  MOVWF  29
00BD:  CALL   02D
....................    for(i=0;i<=3;++i) 
00BE:  CLRF   24
00BF:  MOVF   24,W
00C0:  SUBLW  03
00C1:  BTFSS  03.0
00C2:  GOTO   0CF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C3:  MOVLW  25
00C4:  ADDWF  24,W
00C5:  MOVWF  04
00C6:  BCF    03.7
00C7:  MOVF   00,W
00C8:  MOVWF  29
00C9:  CLRF   2C
00CA:  MOVF   29,W
00CB:  MOVWF  2D
00CC:  CALL   054
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CD:  INCF   24,F
00CE:  GOTO   0BF
00CF:  BCF    0A.3
00D0:  BCF    0A.4
00D1:  GOTO   25F (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01A5:  DECFSZ 29,W
01A6:  GOTO   1A8
01A7:  GOTO   1AB
....................       address=LCD_LINE_TWO; 
01A8:  MOVLW  40
01A9:  MOVWF  2A
01AA:  GOTO   1AC
....................    else 
....................       address=0; 
01AB:  CLRF   2A
....................       
....................    address+=x-1; 
01AC:  MOVLW  01
01AD:  SUBWF  28,W
01AE:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
01AF:  MOVF   2A,W
01B0:  IORLW  80
01B1:  MOVWF  2B
01B2:  CLRF   2C
01B3:  MOVF   2B,W
01B4:  MOVWF  2D
01B5:  CALL   054
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01B6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01B7:  MOVF   27,W
01B8:  XORLW  07
01B9:  BTFSC  03.2
01BA:  GOTO   1C5
01BB:  XORLW  0B
01BC:  BTFSC  03.2
01BD:  GOTO   1CA
01BE:  XORLW  06
01BF:  BTFSC  03.2
01C0:  GOTO   1D2
01C1:  XORLW  02
01C2:  BTFSC  03.2
01C3:  GOTO   1D8
01C4:  GOTO   1DD
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01C5:  MOVLW  01
01C6:  MOVWF  28
01C7:  MOVWF  29
01C8:  CALL   1A5
01C9:  GOTO   1E2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01CA:  CLRF   2C
01CB:  MOVLW  01
01CC:  MOVWF  2D
01CD:  CALL   054
....................                      delay_ms(2); 
01CE:  MOVLW  02
01CF:  MOVWF  29
01D0:  CALL   02D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01D1:  GOTO   1E2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01D2:  MOVLW  01
01D3:  MOVWF  28
01D4:  MOVLW  02
01D5:  MOVWF  29
01D6:  CALL   1A5
01D7:  GOTO   1E2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01D8:  CLRF   2C
01D9:  MOVLW  10
01DA:  MOVWF  2D
01DB:  CALL   054
01DC:  GOTO   1E2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01DD:  MOVLW  01
01DE:  MOVWF  2C
01DF:  MOVF   27,W
01E0:  MOVWF  2D
01E1:  CALL   054
....................      #endif 
....................    } 
01E2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use RS232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, timeout=100) 
*
0188:  MOVLW  01
0189:  MOVWF  25
018A:  MOVLW  40
018B:  MOVWF  24
018C:  MOVLW  67
018D:  MOVWF  77
018E:  DECFSZ 77,F
018F:  GOTO   18E
0190:  GOTO   191
0191:  DECFSZ 24,F
0192:  GOTO   198
0193:  DECFSZ 25,F
0194:  GOTO   198
0195:  CLRF   20
0196:  CLRF   78
0197:  GOTO   1A2
0198:  BTFSS  0C.5
0199:  GOTO   18C
019A:  MOVF   18,W
019B:  MOVWF  20
019C:  MOVF   1A,W
019D:  MOVWF  78
019E:  BTFSS  20.1
019F:  GOTO   1A2
01A0:  BCF    18.4
01A1:  BSF    18.4
01A2:  BCF    0A.3
01A3:  BCF    0A.4
01A4:  GOTO   29C (RETURN)
....................  
.................... void main() 
*
0239:  MOVF   03,W
023A:  ANDLW  1F
023B:  MOVWF  03
023C:  MOVLW  61
023D:  BSF    03.5
023E:  MOVWF  0F
023F:  MOVF   0F,W
0240:  BCF    03.5
0241:  CLRF   20
0242:  BSF    03.5
0243:  BSF    03.6
0244:  BCF    07.3
0245:  MOVLW  19
0246:  BCF    03.6
0247:  MOVWF  19
0248:  MOVLW  A6
0249:  MOVWF  18
024A:  MOVLW  90
024B:  BCF    03.5
024C:  MOVWF  18
024D:  BSF    03.5
024E:  BSF    03.6
024F:  MOVF   09,W
0250:  ANDLW  C0
0251:  MOVWF  09
0252:  BCF    03.6
0253:  BCF    1F.4
0254:  BCF    1F.5
0255:  MOVLW  00
0256:  BSF    03.6
0257:  MOVWF  08
0258:  BCF    03.5
0259:  CLRF   07
025A:  CLRF   08
025B:  CLRF   09
025C:  BCF    03.7
.................... { 
....................  
....................    int16 iVolt; 
....................    char protocolo; 
....................    //int voltaje; 
....................    //int16 angulo; 
....................    lcd_init(); 
025D:  BCF    03.6
025E:  GOTO   094
....................    setup_adc_ports(sAN0); 
025F:  BSF    03.5
0260:  BSF    03.6
0261:  MOVF   09,W
0262:  ANDLW  C0
0263:  MOVWF  09
0264:  BCF    03.6
0265:  BCF    1F.4
0266:  BCF    1F.5
0267:  MOVLW  01
0268:  BSF    03.6
0269:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL); 
026A:  BCF    03.5
026B:  BCF    03.6
026C:  BSF    1F.6
026D:  BSF    1F.7
026E:  BSF    03.5
026F:  BSF    1F.7
0270:  BCF    03.5
0271:  BSF    1F.0
....................  
....................     
....................  
....................    while(TRUE) 
....................    { 
....................       iVolt=read_adc(); 
0272:  BSF    1F.1
0273:  BTFSC  1F.1
0274:  GOTO   273
0275:  BSF    03.5
0276:  MOVF   1E,W
0277:  BCF    03.5
0278:  MOVWF  21
0279:  MOVF   1E,W
027A:  MOVWF  22
....................       delay_ms(1000); 
027B:  MOVLW  04
027C:  MOVWF  24
027D:  MOVLW  FA
027E:  MOVWF  29
027F:  CALL   02D
0280:  DECFSZ 24,F
0281:  GOTO   27D
....................       printf("El ADC es de: %Lu\n\r", iVolt); 
0282:  MOVLW  04
0283:  BSF    03.6
0284:  MOVWF  0D
0285:  MOVLW  00
0286:  MOVWF  0F
0287:  BCF    03.0
0288:  MOVLW  0E
0289:  BCF    03.6
028A:  MOVWF  24
028B:  GOTO   0D2
028C:  MOVLW  10
028D:  MOVWF  04
028E:  MOVF   22,W
028F:  MOVWF  25
0290:  MOVF   21,W
0291:  MOVWF  24
0292:  GOTO   12D
0293:  MOVLW  0A
0294:  BTFSS  0C.4
0295:  GOTO   294
0296:  MOVWF  19
0297:  MOVLW  0D
0298:  BTFSS  0C.4
0299:  GOTO   298
029A:  MOVWF  19
....................        
....................       protocolo=getch(); 
029B:  GOTO   188
029C:  MOVF   78,W
029D:  MOVWF  23
....................        
....................       switch(protocolo){ 
029E:  MOVF   23,W
029F:  XORLW  41
02A0:  BTFSC  03.2
02A1:  GOTO   2A6
02A2:  XORLW  03
02A3:  BTFSC  03.2
02A4:  GOTO   2C8
02A5:  GOTO   2EA
....................        
....................          case 'A': 
....................          printf(lcd_putc,"\f"); 
02A6:  MOVLW  0C
02A7:  MOVWF  27
02A8:  CALL   1B7
....................          lcd_gotoxy(1,1); 
02A9:  MOVLW  01
02AA:  MOVWF  28
02AB:  MOVWF  29
02AC:  CALL   1A5
....................          printf(lcd_putc,"Prtocolo A:"); 
02AD:  MOVLW  0E
02AE:  BSF    03.6
02AF:  MOVWF  0D
02B0:  MOVLW  00
02B1:  MOVWF  0F
02B2:  BCF    03.6
02B3:  CALL   1E3
....................          lcd_gotoxy(1,2); 
02B4:  MOVLW  01
02B5:  MOVWF  28
02B6:  MOVLW  02
02B7:  MOVWF  29
02B8:  CALL   1A5
....................          printf(lcd_putc,"Buen dia"); 
02B9:  MOVLW  14
02BA:  BSF    03.6
02BB:  MOVWF  0D
02BC:  MOVLW  00
02BD:  MOVWF  0F
02BE:  BCF    03.6
02BF:  CALL   1E3
....................          delay_ms(2000); 
02C0:  MOVLW  08
02C1:  MOVWF  24
02C2:  MOVLW  FA
02C3:  MOVWF  29
02C4:  CALL   02D
02C5:  DECFSZ 24,F
02C6:  GOTO   2C2
....................          break; 
02C7:  GOTO   2FF
....................           
....................          case 'B':  
....................          printf(lcd_putc,"\f"); 
02C8:  MOVLW  0C
02C9:  MOVWF  27
02CA:  CALL   1B7
....................          lcd_gotoxy(1,1); 
02CB:  MOVLW  01
02CC:  MOVWF  28
02CD:  MOVWF  29
02CE:  CALL   1A5
....................          printf(lcd_putc,"Prtocolo B:"); 
02CF:  MOVLW  19
02D0:  BSF    03.6
02D1:  MOVWF  0D
02D2:  MOVLW  00
02D3:  MOVWF  0F
02D4:  BCF    03.6
02D5:  CALL   1E3
....................          lcd_gotoxy(1,2); 
02D6:  MOVLW  01
02D7:  MOVWF  28
02D8:  MOVLW  02
02D9:  MOVWF  29
02DA:  CALL   1A5
....................          printf(lcd_putc,"Buenas noches"); 
02DB:  MOVLW  1F
02DC:  BSF    03.6
02DD:  MOVWF  0D
02DE:  MOVLW  00
02DF:  MOVWF  0F
02E0:  BCF    03.6
02E1:  CALL   1E3
....................          delay_ms(2000); 
02E2:  MOVLW  08
02E3:  MOVWF  24
02E4:  MOVLW  FA
02E5:  MOVWF  29
02E6:  CALL   02D
02E7:  DECFSZ 24,F
02E8:  GOTO   2E4
....................          break; 
02E9:  GOTO   2FF
....................           
....................          default: 
....................          printf(lcd_putc,"\f"); 
02EA:  MOVLW  0C
02EB:  MOVWF  27
02EC:  CALL   1B7
....................          lcd_gotoxy(1,1); 
02ED:  MOVLW  01
02EE:  MOVWF  28
02EF:  MOVWF  29
02F0:  CALL   1A5
....................          printf(lcd_putc,"Sin protocolo"); 
02F1:  MOVLW  26
02F2:  BSF    03.6
02F3:  MOVWF  0D
02F4:  MOVLW  00
02F5:  MOVWF  0F
02F6:  BCF    03.6
02F7:  CALL   1E3
....................          delay_ms(1000); 
02F8:  MOVLW  04
02F9:  MOVWF  24
02FA:  MOVLW  FA
02FB:  MOVWF  29
02FC:  CALL   02D
02FD:  DECFSZ 24,F
02FE:  GOTO   2FA
....................          break; 
....................           
....................       } 
02FF:  GOTO   272
....................  
....................    } 
....................  
.................... } 
0300:  SLEEP

Configuration Fuses:
   Word  1: 2CA4   INTRC_IO NOWDT PUT MCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
