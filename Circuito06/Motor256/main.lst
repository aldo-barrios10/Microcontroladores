CCS PCM C Compiler, Version 5.015, 5967               04-oct.-22 22:43

               Filename:   C:\CCS EFREN\Motor256\main.lst

               ROM used:   1129 words (14%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           29 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   293
0003:  NOP
.................... #include<16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA CD,37
0005:  DATA F4,37
0006:  DATA 72,10
0007:  DATA 41,38
0008:  DATA E1,33
0009:  DATA 61,32
000A:  DATA 6F,00
000B:  DATA D6,32
000C:  DATA EC,37
000D:  DATA E3,34
000E:  DATA E4,30
000F:  DATA 64,1D
0010:  DATA 20,18
0011:  DATA A5,12
0012:  DATA 00,00
0013:  DATA CD,37
0014:  DATA F4,37
0015:  DATA 72,10
0016:  DATA 49,3D
0017:  DATA F1,3A
0018:  DATA E9,32
0019:  DATA 72,32
001A:  DATA 61,00
001B:  DATA D6,32
001C:  DATA EC,37
001D:  DATA E3,34
001E:  DATA E4,30
001F:  DATA 64,1D
0020:  DATA A0,12
0021:  DATA EC,3A
0022:  DATA A0,12
0023:  DATA 25,00
0024:  DATA CD,37
0025:  DATA F4,37
0026:  DATA 72,10
0027:  DATA C4,32
0028:  DATA F2,32
0029:  DATA 63,34
002A:  DATA 61,00
002B:  DATA D6,32
002C:  DATA EC,37
002D:  DATA E3,34
002E:  DATA E4,30
002F:  DATA 64,1D
0030:  DATA A0,12
0031:  DATA EC,3A
0032:  DATA A0,12
0033:  DATA 25,00
*
0117:  MOVF   0B,W
0118:  MOVWF  25
0119:  BCF    0B.7
011A:  BSF    03.5
011B:  BSF    03.6
011C:  BSF    0C.7
011D:  BSF    0C.0
011E:  NOP
011F:  NOP
0120:  BCF    03.5
0121:  BCF    03.6
0122:  BTFSC  25.7
0123:  BSF    0B.7
0124:  BSF    03.6
0125:  MOVF   0C,W
0126:  ANDLW  7F
0127:  BTFSC  03.2
0128:  GOTO   16B
0129:  BCF    03.6
012A:  MOVWF  25
012B:  BSF    03.6
012C:  MOVF   0D,W
012D:  BCF    03.6
012E:  MOVWF  26
012F:  BSF    03.6
0130:  MOVF   0F,W
0131:  BCF    03.6
0132:  MOVWF  27
0133:  MOVF   25,W
0134:  MOVWF  2E
0135:  CALL   0EB
0136:  MOVF   26,W
0137:  BSF    03.6
0138:  MOVWF  0D
0139:  BCF    03.6
013A:  MOVF   27,W
013B:  BSF    03.6
013C:  MOVWF  0F
013D:  BCF    03.6
013E:  MOVF   0B,W
013F:  MOVWF  28
0140:  BCF    0B.7
0141:  BSF    03.5
0142:  BSF    03.6
0143:  BSF    0C.7
0144:  BSF    0C.0
0145:  NOP
0146:  NOP
0147:  BCF    03.5
0148:  BCF    03.6
0149:  BTFSC  28.7
014A:  BSF    0B.7
014B:  BSF    03.6
014C:  RLF    0C,W
014D:  RLF    0E,W
014E:  ANDLW  7F
014F:  BTFSC  03.2
0150:  GOTO   16B
0151:  BCF    03.6
0152:  MOVWF  25
0153:  BSF    03.6
0154:  MOVF   0D,W
0155:  BCF    03.6
0156:  MOVWF  26
0157:  BSF    03.6
0158:  MOVF   0F,W
0159:  BCF    03.6
015A:  MOVWF  27
015B:  MOVF   25,W
015C:  MOVWF  2E
015D:  CALL   0EB
015E:  MOVF   26,W
015F:  BSF    03.6
0160:  MOVWF  0D
0161:  BCF    03.6
0162:  MOVF   27,W
0163:  BSF    03.6
0164:  MOVWF  0F
0165:  INCF   0D,F
0166:  BTFSC  03.2
0167:  INCF   0F,F
0168:  BCF    03.6
0169:  GOTO   117
016A:  BSF    03.6
016B:  BCF    03.6
016C:  RETURN
016D:  MOVF   0B,W
016E:  MOVWF  26
016F:  BCF    0B.7
0170:  BSF    03.5
0171:  BSF    03.6
0172:  BSF    0C.7
0173:  BSF    0C.0
0174:  NOP
0175:  NOP
0176:  BCF    03.5
0177:  BCF    03.6
0178:  BTFSC  26.7
0179:  BSF    0B.7
017A:  BTFSC  03.0
017B:  GOTO   1A4
017C:  BSF    03.6
017D:  MOVF   0C,W
017E:  ANDLW  7F
017F:  BCF    03.6
0180:  MOVWF  26
0181:  BSF    03.6
0182:  MOVF   0D,W
0183:  BCF    03.6
0184:  MOVWF  27
0185:  BSF    03.6
0186:  MOVF   0F,W
0187:  BCF    03.6
0188:  MOVWF  28
0189:  MOVF   26,W
018A:  MOVWF  2E
018B:  CALL   0EB
018C:  MOVF   27,W
018D:  BSF    03.6
018E:  MOVWF  0D
018F:  BCF    03.6
0190:  MOVF   28,W
0191:  BSF    03.6
0192:  MOVWF  0F
0193:  BCF    03.6
0194:  MOVF   0B,W
0195:  MOVWF  29
0196:  BCF    0B.7
0197:  BSF    03.5
0198:  BSF    03.6
0199:  BSF    0C.7
019A:  BSF    0C.0
019B:  NOP
019C:  NOP
019D:  BCF    03.5
019E:  BCF    03.6
019F:  BTFSC  29.7
01A0:  BSF    0B.7
01A1:  DECFSZ 25,F
01A2:  GOTO   1A4
01A3:  GOTO   1C3
01A4:  BSF    03.6
01A5:  RLF    0C,W
01A6:  RLF    0E,W
01A7:  ANDLW  7F
01A8:  BCF    03.6
01A9:  MOVWF  26
01AA:  BSF    03.6
01AB:  MOVF   0D,W
01AC:  BCF    03.6
01AD:  MOVWF  27
01AE:  BSF    03.6
01AF:  MOVF   0F,W
01B0:  BCF    03.6
01B1:  MOVWF  28
01B2:  MOVF   26,W
01B3:  MOVWF  2E
01B4:  CALL   0EB
01B5:  MOVF   27,W
01B6:  BSF    03.6
01B7:  MOVWF  0D
01B8:  BCF    03.6
01B9:  MOVF   28,W
01BA:  BSF    03.6
01BB:  MOVWF  0F
01BC:  INCF   0D,F
01BD:  BTFSC  03.2
01BE:  INCF   0F,F
01BF:  BCF    03.0
01C0:  BCF    03.6
01C1:  DECFSZ 25,F
01C2:  GOTO   16D
01C3:  RETURN
01C4:  MOVF   26,W
01C5:  XORWF  28,W
01C6:  ANDLW  80
01C7:  MOVWF  2A
01C8:  BTFSS  26.7
01C9:  GOTO   1CF
01CA:  COMF   25,F
01CB:  COMF   26,F
01CC:  INCF   25,F
01CD:  BTFSC  03.2
01CE:  INCF   26,F
01CF:  BTFSS  28.7
01D0:  GOTO   1D6
01D1:  COMF   27,F
01D2:  COMF   28,F
01D3:  INCF   27,F
01D4:  BTFSC  03.2
01D5:  INCF   28,F
01D6:  MOVLW  10
01D7:  MOVWF  29
01D8:  CLRF   77
01D9:  CLRF   7A
01DA:  RRF    26,F
01DB:  RRF    25,F
01DC:  BTFSS  03.0
01DD:  GOTO   1E4
01DE:  MOVF   27,W
01DF:  ADDWF  77,F
01E0:  BTFSC  03.0
01E1:  INCF   7A,F
01E2:  MOVF   28,W
01E3:  ADDWF  7A,F
01E4:  RRF    7A,F
01E5:  RRF    77,F
01E6:  RRF    79,F
01E7:  RRF    78,F
01E8:  DECFSZ 29,F
01E9:  GOTO   1DA
01EA:  BTFSS  2A.7
01EB:  GOTO   1F1
01EC:  COMF   78,F
01ED:  COMF   79,F
01EE:  INCF   78,F
01EF:  BTFSC  03.2
01F0:  INCF   79,F
01F1:  RETURN
01F2:  MOVF   28,W
01F3:  XORWF  2A,W
01F4:  ANDLW  80
01F5:  MOVWF  2C
01F6:  BTFSS  28.7
01F7:  GOTO   1FD
01F8:  COMF   27,F
01F9:  COMF   28,F
01FA:  INCF   27,F
01FB:  BTFSC  03.2
01FC:  INCF   28,F
01FD:  BTFSS  2A.7
01FE:  GOTO   204
01FF:  COMF   29,F
0200:  COMF   2A,F
0201:  INCF   29,F
0202:  BTFSC  03.2
0203:  INCF   2A,F
0204:  CLRF   78
0205:  CLRF   79
0206:  CLRF   77
0207:  CLRF   7A
0208:  MOVF   2A,W
0209:  BTFSS  03.2
020A:  GOTO   20E
020B:  MOVF   29,W
020C:  BTFSC  03.2
020D:  GOTO   228
020E:  MOVLW  10
020F:  MOVWF  2B
0210:  BCF    03.0
0211:  RLF    27,F
0212:  RLF    28,F
0213:  RLF    77,F
0214:  RLF    7A,F
0215:  MOVF   2A,W
0216:  SUBWF  7A,W
0217:  BTFSS  03.2
0218:  GOTO   21B
0219:  MOVF   29,W
021A:  SUBWF  77,W
021B:  BTFSS  03.0
021C:  GOTO   224
021D:  MOVF   29,W
021E:  SUBWF  77,F
021F:  BTFSS  03.0
0220:  DECF   7A,F
0221:  MOVF   2A,W
0222:  SUBWF  7A,F
0223:  BSF    03.0
0224:  RLF    78,F
0225:  RLF    79,F
0226:  DECFSZ 2B,F
0227:  GOTO   210
0228:  BTFSS  2C.7
0229:  GOTO   22F
022A:  COMF   78,F
022B:  COMF   79,F
022C:  INCF   78,F
022D:  BTFSC  03.2
022E:  INCF   79,F
022F:  RETURN
0230:  CLRF   2D
0231:  MOVF   04,W
0232:  MOVWF  2C
0233:  BCF    2D.0
0234:  BTFSC  03.7
0235:  BSF    2D.0
0236:  SWAPF  26,W
0237:  IORLW  F0
0238:  MOVWF  28
0239:  ADDWF  28,F
023A:  ADDLW  E2
023B:  MOVWF  29
023C:  ADDLW  32
023D:  MOVWF  2B
023E:  MOVF   26,W
023F:  ANDLW  0F
0240:  ADDWF  29,F
0241:  ADDWF  29,F
0242:  ADDWF  2B,F
0243:  ADDLW  E9
0244:  MOVWF  2A
0245:  ADDWF  2A,F
0246:  ADDWF  2A,F
0247:  SWAPF  25,W
0248:  ANDLW  0F
0249:  ADDWF  2A,F
024A:  ADDWF  2B,F
024B:  RLF    2A,F
024C:  RLF    2B,F
024D:  COMF   2B,F
024E:  RLF    2B,F
024F:  MOVF   25,W
0250:  ANDLW  0F
0251:  ADDWF  2B,F
0252:  RLF    28,F
0253:  MOVLW  07
0254:  MOVWF  27
0255:  MOVLW  0A
0256:  ADDWF  2B,F
0257:  DECF   2A,F
0258:  BTFSS  03.0
0259:  GOTO   256
025A:  ADDWF  2A,F
025B:  DECF   29,F
025C:  BTFSS  03.0
025D:  GOTO   25A
025E:  ADDWF  29,F
025F:  DECF   28,F
0260:  BTFSS  03.0
0261:  GOTO   25E
0262:  ADDWF  28,F
0263:  DECF   27,F
0264:  BTFSS  03.0
0265:  GOTO   262
0266:  MOVLW  27
0267:  MOVWF  04
0268:  BCF    03.7
0269:  MOVLW  07
026A:  ANDWF  2C,W
026B:  BCF    2C.6
026C:  ADDWF  04,F
026D:  MOVLW  2B
026E:  SUBWF  04,W
026F:  BTFSC  03.2
0270:  BSF    2C.6
0271:  MOVF   00,W
0272:  MOVWF  77
0273:  BTFSS  03.2
0274:  GOTO   27D
0275:  BTFSC  2C.6
0276:  GOTO   27D
0277:  BTFSC  2C.4
0278:  GOTO   28F
0279:  BTFSC  2C.3
027A:  GOTO   27D
027B:  MOVLW  20
027C:  GOTO   280
027D:  BSF    2C.3
027E:  BCF    2C.4
027F:  MOVLW  30
0280:  ADDWF  77,F
0281:  CLRF   26
0282:  MOVF   04,W
0283:  MOVWF  25
0284:  BCF    26.0
0285:  BTFSC  03.7
0286:  BSF    26.0
0287:  MOVF   77,W
0288:  MOVWF  2E
0289:  CALL   0EB
028A:  MOVF   25,W
028B:  MOVWF  04
028C:  BCF    03.7
028D:  BTFSC  26.0
028E:  BSF    03.7
028F:  INCF   04,F
0290:  BTFSS  2C.6
0291:  GOTO   26D
0292:  RETURN
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO,NOWDT,PROTECT,NOLVP,MCLR,NOBROWNOUT 
.................... #device ADC=8 
.................... #use delay(INTERNAL=4000000) 
*
0034:  MOVLW  2F
0035:  MOVWF  04
0036:  BCF    03.7
0037:  MOVF   00,W
0038:  BTFSC  03.2
0039:  GOTO   048
003A:  MOVLW  01
003B:  MOVWF  78
003C:  CLRF   77
003D:  DECFSZ 77,F
003E:  GOTO   03D
003F:  DECFSZ 78,F
0040:  GOTO   03C
0041:  MOVLW  4A
0042:  MOVWF  77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  GOTO   046
0046:  DECFSZ 00,F
0047:  GOTO   03A
0048:  RETURN
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0061:  MOVLW  0F
0062:  BSF    03.5
0063:  ANDWF  08,W
0064:  IORLW  F0
0065:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0066:  BCF    03.5
0067:  BSF    08.2
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(1); 
0069:  BSF    08.0
....................    delay_cycles(1); 
006A:  NOP
....................    high = lcd_read_nibble(); 
006B:  CALL   055
006C:  MOVF   78,W
006D:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
006E:  BCF    08.0
....................    delay_cycles(1); 
006F:  NOP
....................    lcd_output_enable(1); 
0070:  BSF    08.0
....................    delay_us(1); 
0071:  NOP
....................    low = lcd_read_nibble(); 
0072:  CALL   055
0073:  MOVF   78,W
0074:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
0075:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0076:  MOVLW  0F
0077:  BSF    03.5
0078:  ANDWF  08,W
0079:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
007A:  BCF    03.5
007B:  SWAPF  36,W
007C:  MOVWF  77
007D:  MOVLW  F0
007E:  ANDWF  77,F
007F:  MOVF   77,W
0080:  IORWF  35,W
0081:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0055:  MOVF   08,W
0056:  MOVWF  77
0057:  SWAPF  08,W
0058:  ANDLW  0F
0059:  MOVWF  78
....................   #endif 
005A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0049:  SWAPF  36,W
004A:  ANDLW  F0
004B:  MOVWF  77
004C:  MOVLW  0F
004D:  ANDWF  08,W
004E:  IORWF  77,W
004F:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BSF    08.0
....................    delay_us(2); 
0052:  GOTO   053
....................    lcd_output_enable(0); 
0053:  BCF    08.0
0054:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
005B:  BSF    03.5
005C:  BCF    08.0
....................    lcd_rs_tris(); 
005D:  BCF    08.1
....................    lcd_rw_tris(); 
005E:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
005F:  BCF    03.5
0060:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0082:  MOVF   78,W
0083:  MOVWF  35
0084:  BTFSC  35.7
0085:  GOTO   061
....................    lcd_output_rs(address); 
0086:  BTFSS  33.0
0087:  BCF    08.1
0088:  BTFSC  33.0
0089:  BSF    08.1
....................    delay_cycles(1); 
008A:  NOP
....................    lcd_output_rw(0); 
008B:  BCF    08.2
....................    delay_cycles(1); 
008C:  NOP
....................    lcd_output_enable(0); 
008D:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
008E:  SWAPF  34,W
008F:  MOVWF  35
0090:  MOVLW  0F
0091:  ANDWF  35,F
0092:  MOVF   35,W
0093:  MOVWF  36
0094:  CALL   049
....................    lcd_send_nibble(n & 0xf); 
0095:  MOVF   34,W
0096:  ANDLW  0F
0097:  MOVWF  35
0098:  MOVWF  36
0099:  CALL   049
009A:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
009B:  MOVLW  28
009C:  MOVWF  26
009D:  MOVLW  0C
009E:  MOVWF  27
009F:  MOVLW  01
00A0:  MOVWF  28
00A1:  MOVLW  06
00A2:  MOVWF  29
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00A3:  BCF    08.0
....................    lcd_output_rs(0); 
00A4:  BCF    08.1
....................    lcd_output_rw(0); 
00A5:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A6:  MOVLW  0F
00A7:  BSF    03.5
00A8:  ANDWF  08,W
00A9:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00AA:  BCF    08.0
....................    lcd_rs_tris(); 
00AB:  BCF    08.1
....................    lcd_rw_tris(); 
00AC:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00AD:  MOVLW  0F
00AE:  BCF    03.5
00AF:  MOVWF  2F
00B0:  CALL   034
....................    for(i=1;i<=3;++i) 
00B1:  MOVLW  01
00B2:  MOVWF  25
00B3:  MOVF   25,W
00B4:  SUBLW  03
00B5:  BTFSS  03.0
00B6:  GOTO   0BF
....................    { 
....................        lcd_send_nibble(3); 
00B7:  MOVLW  03
00B8:  MOVWF  36
00B9:  CALL   049
....................        delay_ms(5); 
00BA:  MOVLW  05
00BB:  MOVWF  2F
00BC:  CALL   034
00BD:  INCF   25,F
00BE:  GOTO   0B3
....................    } 
....................     
....................    lcd_send_nibble(2); 
00BF:  MOVLW  02
00C0:  MOVWF  36
00C1:  CALL   049
....................    delay_ms(5); 
00C2:  MOVLW  05
00C3:  MOVWF  2F
00C4:  CALL   034
....................    for(i=0;i<=3;++i) 
00C5:  CLRF   25
00C6:  MOVF   25,W
00C7:  SUBLW  03
00C8:  BTFSS  03.0
00C9:  GOTO   0D6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00CA:  MOVLW  26
00CB:  ADDWF  25,W
00CC:  MOVWF  04
00CD:  BCF    03.7
00CE:  MOVF   00,W
00CF:  MOVWF  2A
00D0:  CLRF   33
00D1:  MOVF   2A,W
00D2:  MOVWF  34
00D3:  CALL   05B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D4:  INCF   25,F
00D5:  GOTO   0C6
00D6:  BCF    0A.3
00D7:  BCF    0A.4
00D8:  GOTO   2AF (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D9:  DECFSZ 30,W
00DA:  GOTO   0DC
00DB:  GOTO   0DF
....................       address=LCD_LINE_TWO; 
00DC:  MOVLW  40
00DD:  MOVWF  31
00DE:  GOTO   0E0
....................    else 
....................       address=0; 
00DF:  CLRF   31
....................       
....................    address+=x-1; 
00E0:  MOVLW  01
00E1:  SUBWF  2F,W
00E2:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
00E3:  MOVF   31,W
00E4:  IORLW  80
00E5:  MOVWF  32
00E6:  CLRF   33
00E7:  MOVF   32,W
00E8:  MOVWF  34
00E9:  CALL   05B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00EA:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00EB:  MOVF   2E,W
00EC:  XORLW  07
00ED:  BTFSC  03.2
00EE:  GOTO   0F9
00EF:  XORLW  0B
00F0:  BTFSC  03.2
00F1:  GOTO   0FE
00F2:  XORLW  06
00F3:  BTFSC  03.2
00F4:  GOTO   106
00F5:  XORLW  02
00F6:  BTFSC  03.2
00F7:  GOTO   10C
00F8:  GOTO   111
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F9:  MOVLW  01
00FA:  MOVWF  2F
00FB:  MOVWF  30
00FC:  CALL   0D9
00FD:  GOTO   116
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00FE:  CLRF   33
00FF:  MOVLW  01
0100:  MOVWF  34
0101:  CALL   05B
....................                      delay_ms(2); 
0102:  MOVLW  02
0103:  MOVWF  2F
0104:  CALL   034
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0105:  GOTO   116
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0106:  MOVLW  01
0107:  MOVWF  2F
0108:  MOVLW  02
0109:  MOVWF  30
010A:  CALL   0D9
010B:  GOTO   116
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010C:  CLRF   33
010D:  MOVLW  10
010E:  MOVWF  34
010F:  CALL   05B
0110:  GOTO   116
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0111:  MOVLW  01
0112:  MOVWF  33
0113:  MOVF   2E,W
0114:  MOVWF  34
0115:  CALL   05B
....................      #endif 
....................    } 
0116:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0293:  MOVF   03,W
0294:  ANDLW  1F
0295:  MOVWF  03
0296:  MOVLW  61
0297:  BSF    03.5
0298:  MOVWF  0F
0299:  MOVF   0F,W
029A:  MOVLW  FF
029B:  BCF    03.5
029C:  MOVWF  20
029D:  BSF    03.5
029E:  BSF    03.6
029F:  MOVF   09,W
02A0:  ANDLW  C0
02A1:  MOVWF  09
02A2:  BCF    03.6
02A3:  BCF    1F.4
02A4:  BCF    1F.5
02A5:  MOVLW  00
02A6:  BSF    03.6
02A7:  MOVWF  08
02A8:  BCF    03.5
02A9:  CLRF   07
02AA:  CLRF   08
02AB:  CLRF   09
02AC:  BCF    03.7
.................... { 
....................  
....................    signed int16 transf, valor; 
....................     
....................    lcd_init(); 
02AD:  BCF    03.6
02AE:  GOTO   09B
....................    setup_ccp1(CCP_PWM);    //Se configura ccp1 para usar pwm  
02AF:  BCF    20.2
02B0:  MOVF   20,W
02B1:  BSF    03.5
02B2:  MOVWF  07
02B3:  BCF    03.5
02B4:  BCF    07.2
02B5:  MOVLW  0C
02B6:  MOVWF  17
02B7:  BSF    03.5
02B8:  CLRF   1B
02B9:  CLRF   1C
02BA:  MOVLW  01
02BB:  MOVWF  1D
....................     
....................    setup_timer_2(T2_DIV_BY_16,255,1);  // Timer a usar 
02BC:  MOVLW  00
02BD:  MOVWF  78
02BE:  IORLW  06
02BF:  BCF    03.5
02C0:  MOVWF  12
02C1:  MOVLW  FF
02C2:  BSF    03.5
02C3:  MOVWF  12
....................     
....................    set_pwm1_duty(0);    //Fijado de ciclo de trabajo en 0% 
02C4:  BCF    03.5
02C5:  CLRF   15
....................     
....................    setup_adc_ports(sAN0);  //Puerto analogico para muestreo 
02C6:  BSF    03.5
02C7:  BSF    03.6
02C8:  MOVF   09,W
02C9:  ANDLW  C0
02CA:  MOVWF  09
02CB:  BCF    03.6
02CC:  BCF    1F.4
02CD:  BCF    1F.5
02CE:  MOVLW  01
02CF:  BSF    03.6
02D0:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL);   // Reloj interno 
02D1:  BCF    03.5
02D2:  BCF    03.6
02D3:  BSF    1F.6
02D4:  BSF    1F.7
02D5:  BSF    03.5
02D6:  BCF    1F.7
02D7:  BCF    03.5
02D8:  BSF    1F.0
....................     
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(0); 
02D9:  MOVLW  00
02DA:  MOVWF  78
02DB:  MOVF   1F,W
02DC:  ANDLW  C3
02DD:  IORWF  78,W
02DE:  MOVWF  1F
....................       valor=read_adc(); 
02DF:  BSF    1F.1
02E0:  BTFSC  1F.1
02E1:  GOTO   2E0
02E2:  MOVF   1E,W
02E3:  CLRF   7A
02E4:  MOVWF  23
02E5:  MOVF   7A,W
02E6:  MOVWF  24
....................        
....................       if(valor<129 && valor>126){   //Rango muesrto es de 513 a 510 
02E7:  BTFSC  24.7
02E8:  GOTO   2F0
02E9:  MOVF   24,F
02EA:  BTFSS  03.2
02EB:  GOTO   32E
02EC:  MOVF   23,W
02ED:  SUBLW  80
02EE:  BTFSS  03.0
02EF:  GOTO   32E
02F0:  BTFSC  24.7
02F1:  GOTO   32E
02F2:  MOVF   24,F
02F3:  BTFSS  03.2
02F4:  GOTO   2F9
02F5:  MOVF   23,W
02F6:  SUBLW  7E
02F7:  BTFSC  03.0
02F8:  GOTO   32E
....................          output_low(PIN_C0); 
02F9:  BCF    20.0
02FA:  MOVF   20,W
02FB:  BSF    03.5
02FC:  MOVWF  07
02FD:  BCF    03.5
02FE:  BCF    07.0
....................          output_low(PIN_C1); 
02FF:  BCF    20.1
0300:  MOVF   20,W
0301:  BSF    03.5
0302:  MOVWF  07
0303:  BCF    03.5
0304:  BCF    07.1
....................           
....................          printf(lcd_putc,"\f"); 
0305:  MOVLW  0C
0306:  MOVWF  2E
0307:  CALL   0EB
....................          lcd_gotoxy(1,1); 
0308:  MOVLW  01
0309:  MOVWF  2F
030A:  MOVWF  30
030B:  CALL   0D9
....................          printf(lcd_putc,"Motor Apagado"); 
030C:  MOVLW  04
030D:  BSF    03.6
030E:  MOVWF  0D
030F:  MOVLW  00
0310:  MOVWF  0F
0311:  BCF    03.6
0312:  CALL   117
....................          lcd_gotoxy(1,2); 
0313:  MOVLW  01
0314:  MOVWF  2F
0315:  MOVLW  02
0316:  MOVWF  30
0317:  CALL   0D9
....................          printf(lcd_putc,"Velocidad: 0%%"); 
0318:  MOVLW  0B
0319:  BSF    03.6
031A:  MOVWF  0D
031B:  MOVLW  00
031C:  MOVWF  0F
031D:  BCF    03.0
031E:  MOVLW  0C
031F:  BCF    03.6
0320:  MOVWF  25
0321:  CALL   16D
0322:  MOVLW  25
0323:  MOVWF  2E
0324:  CALL   0EB
....................          delay_ms(1000); 
0325:  MOVLW  04
0326:  MOVWF  25
0327:  MOVLW  FA
0328:  MOVWF  2F
0329:  CALL   034
032A:  DECFSZ 25,F
032B:  GOTO   327
....................          set_pwm1_duty(0); 
032C:  CLRF   15
....................       } 
032D:  GOTO   467
....................        
....................       else if(valor<127){ 
032E:  BTFSC  24.7
032F:  GOTO   337
0330:  MOVF   24,F
0331:  BTFSS  03.2
0332:  GOTO   3CB
0333:  MOVF   23,W
0334:  SUBLW  7E
0335:  BTFSS  03.0
0336:  GOTO   3CB
....................          output_high(PIN_C0); 
0337:  BCF    20.0
0338:  MOVF   20,W
0339:  BSF    03.5
033A:  MOVWF  07
033B:  BCF    03.5
033C:  BSF    07.0
....................          output_low(PIN_C1); 
033D:  BCF    20.1
033E:  MOVF   20,W
033F:  BSF    03.5
0340:  MOVWF  07
0341:  BCF    03.5
0342:  BCF    07.1
....................           
....................          transf=fabs((valor*2)-255); 
0343:  MOVF   24,W
0344:  MOVWF  26
0345:  MOVF   23,W
0346:  MOVWF  25
0347:  CLRF   28
0348:  MOVLW  02
0349:  MOVWF  27
034A:  CALL   1C4
034B:  MOVF   79,W
034C:  MOVWF  26
034D:  MOVF   78,W
034E:  MOVWF  25
034F:  MOVLW  FF
0350:  SUBWF  25,F
0351:  MOVLW  00
0352:  BTFSS  03.0
0353:  MOVLW  01
0354:  SUBWF  26,F
0355:  MOVF   26,W
0356:  MOVWF  7A
0357:  MOVF   25,W
0358:  BTFSS  26.7
0359:  GOTO   363
035A:  MOVF   25,W
035B:  SUBLW  00
035C:  MOVWF  77
035D:  CLRF   7A
035E:  MOVF   26,W
035F:  BTFSS  03.0
0360:  INCFSZ 26,W
0361:  SUBWF  7A,F
0362:  MOVF   77,W
0363:  MOVWF  21
0364:  MOVF   7A,W
0365:  MOVWF  22
....................          set_pwm1_duty((transf)*4);        //Aqui transf tiene valor de 0 a 255 
0366:  MOVF   22,W
0367:  MOVWF  26
0368:  MOVF   21,W
0369:  MOVWF  25
036A:  CLRF   28
036B:  MOVLW  04
036C:  MOVWF  27
036D:  CALL   1C4
036E:  MOVF   79,W
036F:  MOVWF  26
0370:  MOVF   78,W
0371:  MOVWF  25
0372:  RRF    26,F
0373:  RRF    25,F
0374:  RRF    26,F
0375:  RRF    25,F
0376:  RRF    26,F
0377:  MOVF   25,W
0378:  MOVWF  15
0379:  RRF    26,F
037A:  RRF    26,W
037B:  ANDLW  30
037C:  MOVWF  77
037D:  MOVF   17,W
037E:  ANDLW  CF
037F:  IORWF  77,W
0380:  MOVWF  17
....................          transf = transf*100/255; 
0381:  MOVF   22,W
0382:  MOVWF  26
0383:  MOVF   21,W
0384:  MOVWF  25
0385:  CLRF   28
0386:  MOVLW  64
0387:  MOVWF  27
0388:  CALL   1C4
0389:  MOVF   79,W
038A:  MOVWF  26
038B:  MOVF   78,W
038C:  MOVWF  25
038D:  MOVF   79,W
038E:  MOVWF  28
038F:  MOVF   78,W
0390:  MOVWF  27
0391:  CLRF   2A
0392:  MOVLW  FF
0393:  MOVWF  29
0394:  CALL   1F2
0395:  MOVF   79,W
0396:  MOVWF  22
0397:  MOVF   78,W
0398:  MOVWF  21
....................           
....................          printf(lcd_putc,"\f"); 
0399:  MOVLW  0C
039A:  MOVWF  2E
039B:  CALL   0EB
....................          lcd_gotoxy(1,1); 
039C:  MOVLW  01
039D:  MOVWF  2F
039E:  MOVWF  30
039F:  CALL   0D9
....................          printf(lcd_putc,"Motor Izquierda"); 
03A0:  MOVLW  13
03A1:  BSF    03.6
03A2:  MOVWF  0D
03A3:  MOVLW  00
03A4:  MOVWF  0F
03A5:  BCF    03.6
03A6:  CALL   117
....................          lcd_gotoxy(1,2); 
03A7:  MOVLW  01
03A8:  MOVWF  2F
03A9:  MOVLW  02
03AA:  MOVWF  30
03AB:  CALL   0D9
....................          printf(lcd_putc,"Velocidad: %lu %%", transf); 
03AC:  MOVLW  1B
03AD:  BSF    03.6
03AE:  MOVWF  0D
03AF:  MOVLW  00
03B0:  MOVWF  0F
03B1:  BCF    03.0
03B2:  MOVLW  0B
03B3:  BCF    03.6
03B4:  MOVWF  25
03B5:  CALL   16D
03B6:  MOVLW  10
03B7:  MOVWF  04
03B8:  MOVF   22,W
03B9:  MOVWF  26
03BA:  MOVF   21,W
03BB:  MOVWF  25
03BC:  CALL   230
03BD:  MOVLW  20
03BE:  MOVWF  2E
03BF:  CALL   0EB
03C0:  MOVLW  25
03C1:  MOVWF  2E
03C2:  CALL   0EB
....................          delay_ms(1000); 
03C3:  MOVLW  04
03C4:  MOVWF  25
03C5:  MOVLW  FA
03C6:  MOVWF  2F
03C7:  CALL   034
03C8:  DECFSZ 25,F
03C9:  GOTO   3C5
....................           
....................       } 
03CA:  GOTO   467
....................        
....................       else if(valor>128){ 
03CB:  BTFSC  24.7
03CC:  GOTO   467
03CD:  MOVF   24,F
03CE:  BTFSS  03.2
03CF:  GOTO   3D4
03D0:  MOVF   23,W
03D1:  SUBLW  80
03D2:  BTFSC  03.0
03D3:  GOTO   467
....................          output_high(PIN_C1); 
03D4:  BCF    20.1
03D5:  MOVF   20,W
03D6:  BSF    03.5
03D7:  MOVWF  07
03D8:  BCF    03.5
03D9:  BSF    07.1
....................          output_low(PIN_C0); 
03DA:  BCF    20.0
03DB:  MOVF   20,W
03DC:  BSF    03.5
03DD:  MOVWF  07
03DE:  BCF    03.5
03DF:  BCF    07.0
....................           
....................          transf=fabs((valor*2)-255); 
03E0:  MOVF   24,W
03E1:  MOVWF  26
03E2:  MOVF   23,W
03E3:  MOVWF  25
03E4:  CLRF   28
03E5:  MOVLW  02
03E6:  MOVWF  27
03E7:  CALL   1C4
03E8:  MOVF   79,W
03E9:  MOVWF  26
03EA:  MOVF   78,W
03EB:  MOVWF  25
03EC:  MOVLW  FF
03ED:  SUBWF  25,F
03EE:  MOVLW  00
03EF:  BTFSS  03.0
03F0:  MOVLW  01
03F1:  SUBWF  26,F
03F2:  MOVF   26,W
03F3:  MOVWF  7A
03F4:  MOVF   25,W
03F5:  BTFSS  26.7
03F6:  GOTO   400
03F7:  MOVF   25,W
03F8:  SUBLW  00
03F9:  MOVWF  77
03FA:  CLRF   7A
03FB:  MOVF   26,W
03FC:  BTFSS  03.0
03FD:  INCFSZ 26,W
03FE:  SUBWF  7A,F
03FF:  MOVF   77,W
0400:  MOVWF  21
0401:  MOVF   7A,W
0402:  MOVWF  22
....................          set_pwm1_duty((transf)*4);          //Aqui transf tiene valor de 0 a 255 
0403:  MOVF   22,W
0404:  MOVWF  26
0405:  MOVF   21,W
0406:  MOVWF  25
0407:  CLRF   28
0408:  MOVLW  04
0409:  MOVWF  27
040A:  CALL   1C4
040B:  MOVF   79,W
040C:  MOVWF  26
040D:  MOVF   78,W
040E:  MOVWF  25
040F:  RRF    26,F
0410:  RRF    25,F
0411:  RRF    26,F
0412:  RRF    25,F
0413:  RRF    26,F
0414:  MOVF   25,W
0415:  MOVWF  15
0416:  RRF    26,F
0417:  RRF    26,W
0418:  ANDLW  30
0419:  MOVWF  77
041A:  MOVF   17,W
041B:  ANDLW  CF
041C:  IORWF  77,W
041D:  MOVWF  17
....................          transf = transf*100/255; 
041E:  MOVF   22,W
041F:  MOVWF  26
0420:  MOVF   21,W
0421:  MOVWF  25
0422:  CLRF   28
0423:  MOVLW  64
0424:  MOVWF  27
0425:  CALL   1C4
0426:  MOVF   79,W
0427:  MOVWF  26
0428:  MOVF   78,W
0429:  MOVWF  25
042A:  MOVF   79,W
042B:  MOVWF  28
042C:  MOVF   78,W
042D:  MOVWF  27
042E:  CLRF   2A
042F:  MOVLW  FF
0430:  MOVWF  29
0431:  CALL   1F2
0432:  MOVF   79,W
0433:  MOVWF  22
0434:  MOVF   78,W
0435:  MOVWF  21
....................           
....................          printf(lcd_putc,"\f"); 
0436:  MOVLW  0C
0437:  MOVWF  2E
0438:  CALL   0EB
....................          lcd_gotoxy(1,1); 
0439:  MOVLW  01
043A:  MOVWF  2F
043B:  MOVWF  30
043C:  CALL   0D9
....................          printf(lcd_putc,"Motor Derecha"); 
043D:  MOVLW  24
043E:  BSF    03.6
043F:  MOVWF  0D
0440:  MOVLW  00
0441:  MOVWF  0F
0442:  BCF    03.6
0443:  CALL   117
....................          lcd_gotoxy(1,2); 
0444:  MOVLW  01
0445:  MOVWF  2F
0446:  MOVLW  02
0447:  MOVWF  30
0448:  CALL   0D9
....................          printf(lcd_putc,"Velocidad: %lu %%",transf); 
0449:  MOVLW  2B
044A:  BSF    03.6
044B:  MOVWF  0D
044C:  MOVLW  00
044D:  MOVWF  0F
044E:  BCF    03.0
044F:  MOVLW  0B
0450:  BCF    03.6
0451:  MOVWF  25
0452:  CALL   16D
0453:  MOVLW  10
0454:  MOVWF  04
0455:  MOVF   22,W
0456:  MOVWF  26
0457:  MOVF   21,W
0458:  MOVWF  25
0459:  CALL   230
045A:  MOVLW  20
045B:  MOVWF  2E
045C:  CALL   0EB
045D:  MOVLW  25
045E:  MOVWF  2E
045F:  CALL   0EB
....................  
....................          delay_ms(1000); 
0460:  MOVLW  04
0461:  MOVWF  25
0462:  MOVLW  FA
0463:  MOVWF  2F
0464:  CALL   034
0465:  DECFSZ 25,F
0466:  GOTO   462
....................       } 
0467:  GOTO   2D9
....................        
....................  
....................    } 
....................  
.................... } 
0468:  SLEEP

Configuration Fuses:
   Word  1: 2CA4   INTRC_IO NOWDT PUT MCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
